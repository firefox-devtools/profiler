// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`timeline/GlobalTrack matches the snapshot of a global process track 1`] = `
<li
  class="timelineTrack"
>
  <div
    class="timelineTrackRow timelineTrackGlobalRow"
  >
    <div
      class="react-contextmenu-wrapper timelineTrackLabel timelineTrackGlobalGrippy"
      title="Content Process
Thread: \\"GeckoMain\\" (22)
Process: \\"tab\\" (222)"
    >
      <button
        class="timelineTrackNameButton"
        type="button"
      >
        Content Process
        <div
          class="timelineTrackNameButtonAdditionalDetails"
        >
          PID: 
          222
        </div>
      </button>
      <button
        class="timelineTrackCloseButton"
        title="Hide process"
        type="button"
      />
    </div>
    <div
      class="timelineTrackTrack"
    >
      <div
        class="timelineTrackThread expanded"
      >
        <div
          class="timelineMarkers timelineMarkersMemory"
          data-testid="TimelineMarkersMemory"
        >
          <div
            class="react-contextmenu-wrapper"
          >
            <div>
              <canvas
                class="timelineMarkersCanvas"
                height="400"
                width="400"
              />
            </div>
          </div>
        </div>
        <div
          class="timelineMarkers"
          data-testid="TimelineMarkersJank"
        >
          <div
            class="react-contextmenu-wrapper"
          >
            <div>
              <canvas
                class="timelineMarkersCanvas"
                height="400"
                width="400"
              />
            </div>
          </div>
        </div>
        <div
          class="timelineMarkers timelineMarkersGeckoMain"
          data-testid="TimelineMarkersOverview"
        >
          <div
            class="react-contextmenu-wrapper"
          >
            <div>
              <canvas
                class="timelineMarkersCanvas"
                height="400"
                width="400"
              />
            </div>
          </div>
        </div>
        <div
          class="threadActivityGraph"
        >
          <div>
            <canvas
              class="threadActivityGraphCanvas threadActivityGraphCanvas"
              height="400"
              width="400"
            >
              <h2>
                Activity Graph for 
                Content Process
              </h2>
              <p>
                This graph shows a visual chart of thread activity.
              </p>
            </canvas>
          </div>
        </div>
        <div
          class="threadSampleGraph"
        >
          <div>
            <canvas
              class="threadSampleGraphCanvas threadSampleGraphCanvas"
              height="400"
              width="400"
            >
              <h2>
                Stack Graph for 
                Content Process
              </h2>
              <p>
                This graph charts the stack height of each sample.
              </p>
            </canvas>
          </div>
        </div>
        <div
          class="timelineEmptyThreadIndicator"
        />
      </div>
    </div>
  </div>
  <ol
    class="timelineTrackLocalTracks"
  >
    <li
      class="timelineTrack timelineTrackLocal"
    >
      <div
        class="timelineTrackRow timelineTrackLocalRow selected"
      >
        <div
          class="react-contextmenu-wrapper timelineTrackLabel timelineTrackLocalLabel timelineTrackLocalGrippy"
          title="DOM Worker
Thread: \\"DOM Worker\\" (33)
Process: \\"tab\\" (222)"
        >
          <button
            class="timelineTrackNameButton"
            type="button"
          >
            DOM Worker
          </button>
          <button
            class="timelineTrackCloseButton"
            title="Hide track"
            type="button"
          />
        </div>
        <div
          class="timelineTrackTrack"
        >
          <div
            class="timelineTrackThread expanded"
          >
            <div
              class="timelineMarkers selected"
              data-testid="TimelineMarkersJank"
            >
              <div
                class="react-contextmenu-wrapper"
              >
                <div>
                  <canvas
                    class="timelineMarkersCanvas"
                    height="400"
                    width="400"
                  />
                </div>
              </div>
            </div>
            <div
              class="threadActivityGraph"
            >
              <div>
                <canvas
                  class="threadActivityGraphCanvas threadActivityGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Activity Graph for 
                    DOM Worker
                  </h2>
                  <p>
                    This graph shows a visual chart of thread activity.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="threadSampleGraph"
            >
              <div>
                <canvas
                  class="threadSampleGraphCanvas threadSampleGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Stack Graph for 
                    DOM Worker
                  </h2>
                  <p>
                    This graph charts the stack height of each sample.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="timelineEmptyThreadIndicator"
            />
          </div>
        </div>
      </div>
    </li>
    <li
      class="timelineTrack timelineTrackLocal"
    >
      <div
        class="timelineTrackRow timelineTrackLocalRow"
      >
        <div
          class="react-contextmenu-wrapper timelineTrackLabel timelineTrackLocalLabel timelineTrackLocalGrippy"
          title="Style
Thread: \\"Style\\" (44)
Process: \\"tab\\" (222)"
        >
          <button
            class="timelineTrackNameButton"
            type="button"
          >
            Style
          </button>
          <button
            class="timelineTrackCloseButton"
            title="Hide track"
            type="button"
          />
        </div>
        <div
          class="timelineTrackTrack"
        >
          <div
            class="timelineTrackThread expanded"
          >
            <div
              class="timelineMarkers"
              data-testid="TimelineMarkersJank"
            >
              <div
                class="react-contextmenu-wrapper"
              >
                <div>
                  <canvas
                    class="timelineMarkersCanvas"
                    height="400"
                    width="400"
                  />
                </div>
              </div>
            </div>
            <div
              class="threadActivityGraph"
            >
              <div>
                <canvas
                  class="threadActivityGraphCanvas threadActivityGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Activity Graph for 
                    Style
                  </h2>
                  <p>
                    This graph shows a visual chart of thread activity.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="threadSampleGraph"
            >
              <div>
                <canvas
                  class="threadSampleGraphCanvas threadSampleGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Stack Graph for 
                    Style
                  </h2>
                  <p>
                    This graph charts the stack height of each sample.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="timelineEmptyThreadIndicator"
            />
          </div>
        </div>
      </div>
    </li>
  </ol>
</li>
`;

exports[`timeline/GlobalTrack matches the snapshot of a global process track with pid set to 0 1`] = `
<li
  class="timelineTrack"
>
  <div
    class="timelineTrackRow timelineTrackGlobalRow"
  >
    <div
      class="react-contextmenu-wrapper timelineTrackLabel timelineTrackGlobalGrippy"
      title="Content Process
Thread: \\"GeckoMain\\" (22)
Process: \\"tab\\" (0)"
    >
      <button
        class="timelineTrackNameButton"
        type="button"
      >
        Content Process
      </button>
      <button
        class="timelineTrackCloseButton"
        title="Hide process"
        type="button"
      />
    </div>
    <div
      class="timelineTrackTrack"
    >
      <div
        class="timelineTrackThread expanded"
      >
        <div
          class="timelineMarkers timelineMarkersMemory"
          data-testid="TimelineMarkersMemory"
        >
          <div
            class="react-contextmenu-wrapper"
          >
            <div>
              <canvas
                class="timelineMarkersCanvas"
                height="400"
                width="400"
              />
            </div>
          </div>
        </div>
        <div
          class="timelineMarkers"
          data-testid="TimelineMarkersJank"
        >
          <div
            class="react-contextmenu-wrapper"
          >
            <div>
              <canvas
                class="timelineMarkersCanvas"
                height="400"
                width="400"
              />
            </div>
          </div>
        </div>
        <div
          class="timelineMarkers timelineMarkersGeckoMain"
          data-testid="TimelineMarkersOverview"
        >
          <div
            class="react-contextmenu-wrapper"
          >
            <div>
              <canvas
                class="timelineMarkersCanvas"
                height="400"
                width="400"
              />
            </div>
          </div>
        </div>
        <div
          class="threadActivityGraph"
        >
          <div>
            <canvas
              class="threadActivityGraphCanvas threadActivityGraphCanvas"
              height="400"
              width="400"
            >
              <h2>
                Activity Graph for 
                Content Process
              </h2>
              <p>
                This graph shows a visual chart of thread activity.
              </p>
            </canvas>
          </div>
        </div>
        <div
          class="threadSampleGraph"
        >
          <div>
            <canvas
              class="threadSampleGraphCanvas threadSampleGraphCanvas"
              height="400"
              width="400"
            >
              <h2>
                Stack Graph for 
                Content Process
              </h2>
              <p>
                This graph charts the stack height of each sample.
              </p>
            </canvas>
          </div>
        </div>
        <div
          class="timelineEmptyThreadIndicator"
        />
      </div>
    </div>
  </div>
</li>
`;

exports[`timeline/GlobalTrack matches the snapshot of a global process track without a thread 1`] = `
<li
  class="timelineTrack"
>
  <div
    class="timelineTrackRow timelineTrackGlobalRow"
  >
    <div
      class="react-contextmenu-wrapper timelineTrackLabel timelineTrackGlobalGrippy"
    >
      <button
        class="timelineTrackNameButton"
        type="button"
      >
        Process 5555
      </button>
      <button
        class="timelineTrackCloseButton"
        title="Hide process"
        type="button"
      />
    </div>
    <div
      class="timelineTrackTrack"
    >
      <div
        class="timelineTrackThreadBlank"
        style="--timeline-track-thread-blank-height: 30px;"
      />
    </div>
  </div>
  <ol
    class="timelineTrackLocalTracks"
  >
    <li
      class="timelineTrack timelineTrackLocal"
    >
      <div
        class="timelineTrackRow timelineTrackLocalRow"
      >
        <div
          class="react-contextmenu-wrapper timelineTrackLabel timelineTrackLocalLabel timelineTrackLocalGrippy"
          title="NoMain
Thread: \\"NoMain\\" (0)
Process: \\"default\\" (5555)"
        >
          <button
            class="timelineTrackNameButton"
            type="button"
          >
            NoMain
          </button>
          <button
            class="timelineTrackCloseButton"
            title="Hide track"
            type="button"
          />
        </div>
        <div
          class="timelineTrackTrack"
        >
          <div
            class="timelineTrackThread expanded"
          >
            <div
              class="timelineMarkers"
              data-testid="TimelineMarkersJank"
            >
              <div
                class="react-contextmenu-wrapper"
              >
                <div>
                  <canvas
                    class="timelineMarkersCanvas"
                    height="400"
                    width="400"
                  />
                </div>
              </div>
            </div>
            <div
              class="threadActivityGraph"
            >
              <div>
                <canvas
                  class="threadActivityGraphCanvas threadActivityGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Activity Graph for 
                    NoMain
                  </h2>
                  <p>
                    This graph shows a visual chart of thread activity.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="threadSampleGraph"
            >
              <div>
                <canvas
                  class="threadSampleGraphCanvas threadSampleGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Stack Graph for 
                    NoMain
                  </h2>
                  <p>
                    This graph charts the stack height of each sample.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="timelineEmptyThreadIndicator"
            />
          </div>
        </div>
      </div>
    </li>
  </ol>
</li>
`;

exports[`timeline/GlobalTrack will not render markers to the timeline-overview when showMarkersInTimeline is not set 1`] = `
<li
  class="timelineTrack"
>
  <div
    class="timelineTrackRow timelineTrackGlobalRow"
  >
    <div
      class="react-contextmenu-wrapper timelineTrackLabel timelineTrackGlobalGrippy"
    >
      <button
        class="timelineTrackNameButton"
        type="button"
      >
        Process 0
      </button>
      <button
        class="timelineTrackCloseButton"
        title="Hide process"
        type="button"
      />
    </div>
    <div
      class="timelineTrackTrack"
    >
      <div
        class="timelineTrackThreadBlank"
        style="--timeline-track-thread-blank-height: 30px;"
      />
    </div>
  </div>
  <ol
    class="timelineTrackLocalTracks"
  >
    <li
      class="timelineTrack timelineTrackLocal"
    >
      <div
        class="timelineTrackRow timelineTrackLocalRow selected"
      >
        <div
          class="react-contextmenu-wrapper timelineTrackLabel timelineTrackLocalLabel timelineTrackLocalGrippy"
          title="Task Thread
Thread: \\"Task Thread\\" (0)
Process: \\"default\\" (0)"
        >
          <button
            class="timelineTrackNameButton"
            type="button"
          >
            Task Thread
          </button>
          <button
            class="timelineTrackCloseButton"
            title="Hide track"
            type="button"
          />
        </div>
        <div
          class="timelineTrackTrack"
        >
          <div
            class="timelineTrackThread expanded"
          >
            <div
              class="timelineMarkers selected"
              data-testid="TimelineMarkersJank"
            >
              <div
                class="react-contextmenu-wrapper"
              >
                <div>
                  <canvas
                    class="timelineMarkersCanvas"
                    height="400"
                    width="400"
                  />
                </div>
              </div>
            </div>
            <div
              class="threadActivityGraph"
            >
              <div>
                <canvas
                  class="threadActivityGraphCanvas threadActivityGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Activity Graph for 
                    Task Thread
                  </h2>
                  <p>
                    This graph shows a visual chart of thread activity.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="threadSampleGraph"
            >
              <div>
                <canvas
                  class="threadSampleGraphCanvas threadSampleGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Stack Graph for 
                    Task Thread
                  </h2>
                  <p>
                    This graph charts the stack height of each sample.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="timelineEmptyThreadIndicator"
            />
          </div>
        </div>
      </div>
    </li>
  </ol>
</li>
`;

exports[`timeline/GlobalTrack will not render markers to the timeline-overview when showMarkersInTimeline is not set 2`] = `
Array [
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#b1b1b360",
  ],
  Array [
    "addColorStop",
    0.25,
    "#b1b1b360",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#b1b1b360",
  ],
  Array [
    "addColorStop",
    0.75,
    "#b1b1b360",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#b1b1b360",
          ],
          Array [
            0.25,
            "#b1b1b360",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#b1b1b360",
          ],
          Array [
            0.75,
            "#b1b1b360",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "transparent",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#6200a460",
  ],
  Array [
    "addColorStop",
    0.25,
    "#6200a460",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#6200a460",
  ],
  Array [
    "addColorStop",
    0.75,
    "#6200a460",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#6200a460",
          ],
          Array [
            0.25,
            "#6200a460",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#6200a460",
          ],
          Array [
            0.75,
            "#6200a460",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#ffe90070",
  ],
  Array [
    "addColorStop",
    0.25,
    "#ffe90070",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#ffe90070",
  ],
  Array [
    "addColorStop",
    0.75,
    "#ffe90070",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#ffe90070",
          ],
          Array [
            0.25,
            "#ffe90070",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#ffe90070",
          ],
          Array [
            0.75,
            "#ffe90070",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#ff940060",
  ],
  Array [
    "addColorStop",
    0.25,
    "#ff940060",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#ff940060",
  ],
  Array [
    "addColorStop",
    0.75,
    "#ff940060",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#ff940060",
          ],
          Array [
            0.25,
            "#ff940060",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#ff940060",
          ],
          Array [
            0.75,
            "#ff940060",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#45a1ff60",
  ],
  Array [
    "addColorStop",
    0.25,
    "#45a1ff60",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#45a1ff60",
  ],
  Array [
    "addColorStop",
    0.75,
    "#45a1ff60",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#45a1ff60",
          ],
          Array [
            0.25,
            "#45a1ff60",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#45a1ff60",
          ],
          Array [
            0.75,
            "#45a1ff60",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#12bc0060",
  ],
  Array [
    "addColorStop",
    0.25,
    "#12bc0060",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#12bc0060",
  ],
  Array [
    "addColorStop",
    0.75,
    "#12bc0060",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#12bc0060",
          ],
          Array [
            0.25,
            "#12bc0060",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#12bc0060",
          ],
          Array [
            0.75,
            "#12bc0060",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#0060df60",
  ],
  Array [
    "addColorStop",
    0.25,
    "#0060df60",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#0060df60",
  ],
  Array [
    "addColorStop",
    0.75,
    "#0060df60",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#0060df60",
          ],
          Array [
            0.25,
            "#0060df60",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#0060df60",
          ],
          Array [
            0.75,
            "#0060df60",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "set globalCompositeOperation",
    "lighter",
  ],
  Array [
    "set fillStyle",
    "#b1b1b360",
  ],
  Array [
    "set fillStyle",
    "#b1b1b3",
  ],
  Array [
    "set fillStyle",
    "#b1b1b360",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#ffe90070",
  ],
  Array [
    "set fillStyle",
    "#ffe129",
  ],
  Array [
    "set fillStyle",
    "#ffe90070",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#6200a460",
  ],
  Array [
    "set fillStyle",
    "#6200a4",
  ],
  Array [
    "set fillStyle",
    "#6200a460",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#12bc0060",
  ],
  Array [
    "set fillStyle",
    "#12bc00",
  ],
  Array [
    "set fillStyle",
    "#12bc0060",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#0060df60",
  ],
  Array [
    "set fillStyle",
    "#0060df",
  ],
  Array [
    "set fillStyle",
    "#0060df60",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#ff940060",
  ],
  Array [
    "set fillStyle",
    "#ff9400",
  ],
  Array [
    "set fillStyle",
    "#ff940060",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#45a1ff60",
  ],
  Array [
    "set fillStyle",
    "#45a1ff",
  ],
  Array [
    "set fillStyle",
    "#45a1ff60",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set globalCompositeOperation",
    "lighter",
  ],
  Array [
    "set fillStyle",
    "#b1b1b360",
  ],
  Array [
    "set fillStyle",
    "#b1b1b3",
  ],
  Array [
    "set fillStyle",
    "#b1b1b360",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#ffe90070",
  ],
  Array [
    "set fillStyle",
    "#ffe129",
  ],
  Array [
    "set fillStyle",
    "#ffe90070",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#6200a460",
  ],
  Array [
    "set fillStyle",
    "#6200a4",
  ],
  Array [
    "set fillStyle",
    "#6200a460",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#12bc0060",
  ],
  Array [
    "set fillStyle",
    "#12bc00",
  ],
  Array [
    "set fillStyle",
    "#12bc0060",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#0060df60",
  ],
  Array [
    "set fillStyle",
    "#0060df",
  ],
  Array [
    "set fillStyle",
    "#0060df60",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#ff940060",
  ],
  Array [
    "set fillStyle",
    "#ff9400",
  ],
  Array [
    "set fillStyle",
    "#ff940060",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#45a1ff60",
  ],
  Array [
    "set fillStyle",
    "#45a1ff",
  ],
  Array [
    "set fillStyle",
    "#45a1ff60",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "clearRect",
    0,
    0,
    400,
    400,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "scale",
    1,
    1,
  ],
]
`;

exports[`timeline/GlobalTrack will render markers with a timeline-overview schema 1`] = `
<li
  class="timelineTrack"
>
  <div
    class="timelineTrackRow timelineTrackGlobalRow"
  >
    <div
      class="react-contextmenu-wrapper timelineTrackLabel timelineTrackGlobalGrippy"
    >
      <button
        class="timelineTrackNameButton"
        type="button"
      >
        Process 0
      </button>
      <button
        class="timelineTrackCloseButton"
        title="Hide process"
        type="button"
      />
    </div>
    <div
      class="timelineTrackTrack"
    >
      <div
        class="timelineTrackThreadBlank"
        style="--timeline-track-thread-blank-height: 30px;"
      />
    </div>
  </div>
  <ol
    class="timelineTrackLocalTracks"
  >
    <li
      class="timelineTrack timelineTrackLocal"
    >
      <div
        class="timelineTrackRow timelineTrackLocalRow selected"
      >
        <div
          class="react-contextmenu-wrapper timelineTrackLabel timelineTrackLocalLabel timelineTrackLocalGrippy"
          title="Task Thread
Thread: \\"Task Thread\\" (0)
Process: \\"default\\" (0)"
        >
          <button
            class="timelineTrackNameButton"
            type="button"
          >
            Task Thread
          </button>
          <button
            class="timelineTrackCloseButton"
            title="Hide track"
            type="button"
          />
        </div>
        <div
          class="timelineTrackTrack"
        >
          <div
            class="timelineTrackThread expanded"
          >
            <div
              class="timelineMarkers selected"
              data-testid="TimelineMarkersJank"
            >
              <div
                class="react-contextmenu-wrapper"
              >
                <div>
                  <canvas
                    class="timelineMarkersCanvas"
                    height="400"
                    width="400"
                  />
                </div>
              </div>
            </div>
            <div
              class="timelineMarkers selected"
              data-testid="TimelineMarkersOverview"
            >
              <div
                class="react-contextmenu-wrapper"
              >
                <div>
                  <canvas
                    class="timelineMarkersCanvas"
                    height="400"
                    width="400"
                  />
                </div>
              </div>
            </div>
            <div
              class="threadActivityGraph"
            >
              <div>
                <canvas
                  class="threadActivityGraphCanvas threadActivityGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Activity Graph for 
                    Task Thread
                  </h2>
                  <p>
                    This graph shows a visual chart of thread activity.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="threadSampleGraph"
            >
              <div>
                <canvas
                  class="threadSampleGraphCanvas threadSampleGraphCanvas"
                  height="400"
                  width="400"
                >
                  <h2>
                    Stack Graph for 
                    Task Thread
                  </h2>
                  <p>
                    This graph charts the stack height of each sample.
                  </p>
                </canvas>
              </div>
            </div>
            <div
              class="timelineEmptyThreadIndicator"
            />
          </div>
        </div>
      </div>
    </li>
  </ol>
</li>
`;

exports[`timeline/GlobalTrack will render markers with a timeline-overview schema 2`] = `
Array [
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#b1b1b360",
  ],
  Array [
    "addColorStop",
    0.25,
    "#b1b1b360",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#b1b1b360",
  ],
  Array [
    "addColorStop",
    0.75,
    "#b1b1b360",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#b1b1b360",
          ],
          Array [
            0.25,
            "#b1b1b360",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#b1b1b360",
          ],
          Array [
            0.75,
            "#b1b1b360",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "transparent",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#6200a460",
  ],
  Array [
    "addColorStop",
    0.25,
    "#6200a460",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#6200a460",
  ],
  Array [
    "addColorStop",
    0.75,
    "#6200a460",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#6200a460",
          ],
          Array [
            0.25,
            "#6200a460",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#6200a460",
          ],
          Array [
            0.75,
            "#6200a460",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#ffe90070",
  ],
  Array [
    "addColorStop",
    0.25,
    "#ffe90070",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#ffe90070",
  ],
  Array [
    "addColorStop",
    0.75,
    "#ffe90070",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#ffe90070",
          ],
          Array [
            0.25,
            "#ffe90070",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#ffe90070",
          ],
          Array [
            0.75,
            "#ffe90070",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#ff940060",
  ],
  Array [
    "addColorStop",
    0.25,
    "#ff940060",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#ff940060",
  ],
  Array [
    "addColorStop",
    0.75,
    "#ff940060",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#ff940060",
          ],
          Array [
            0.25,
            "#ff940060",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#ff940060",
          ],
          Array [
            0.75,
            "#ff940060",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#45a1ff60",
  ],
  Array [
    "addColorStop",
    0.25,
    "#45a1ff60",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#45a1ff60",
  ],
  Array [
    "addColorStop",
    0.75,
    "#45a1ff60",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#45a1ff60",
          ],
          Array [
            0.25,
            "#45a1ff60",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#45a1ff60",
          ],
          Array [
            0.75,
            "#45a1ff60",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#12bc0060",
  ],
  Array [
    "addColorStop",
    0.25,
    "#12bc0060",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#12bc0060",
  ],
  Array [
    "addColorStop",
    0.75,
    "#12bc0060",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#12bc0060",
          ],
          Array [
            0.25,
            "#12bc0060",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#12bc0060",
          ],
          Array [
            0.75,
            "#12bc0060",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "createLinearGradient",
    0,
    0,
    4,
    4,
  ],
  Array [
    "addColorStop",
    0,
    "#0060df60",
  ],
  Array [
    "addColorStop",
    0.25,
    "#0060df60",
  ],
  Array [
    "addColorStop",
    0.25,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "transparent",
  ],
  Array [
    "addColorStop",
    0.5,
    "#0060df60",
  ],
  Array [
    "addColorStop",
    0.75,
    "#0060df60",
  ],
  Array [
    "addColorStop",
    0.75,
    "transparent",
  ],
  Array [
    "addColorStop",
    1,
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {
      "addColorStop": [MockFunction] {
        "calls": Array [
          Array [
            0,
            "#0060df60",
          ],
          Array [
            0.25,
            "#0060df60",
          ],
          Array [
            0.25,
            "transparent",
          ],
          Array [
            0.5,
            "transparent",
          ],
          Array [
            0.5,
            "#0060df60",
          ],
          Array [
            0.75,
            "#0060df60",
          ],
          Array [
            0.75,
            "transparent",
          ],
          Array [
            1,
            "transparent",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
  Array [
    "fillRect",
    0,
    0,
    4,
    4,
  ],
  Array [
    "createPattern",
    <canvas
      height="4"
      width="4"
    />,
    "repeat",
  ],
  Array [
    "set globalCompositeOperation",
    "lighter",
  ],
  Array [
    "set fillStyle",
    "#b1b1b360",
  ],
  Array [
    "set fillStyle",
    "#b1b1b3",
  ],
  Array [
    "set fillStyle",
    "#b1b1b360",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#ffe90070",
  ],
  Array [
    "set fillStyle",
    "#ffe129",
  ],
  Array [
    "set fillStyle",
    "#ffe90070",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#6200a460",
  ],
  Array [
    "set fillStyle",
    "#6200a4",
  ],
  Array [
    "set fillStyle",
    "#6200a460",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#12bc0060",
  ],
  Array [
    "set fillStyle",
    "#12bc00",
  ],
  Array [
    "set fillStyle",
    "#12bc0060",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#0060df60",
  ],
  Array [
    "set fillStyle",
    "#0060df",
  ],
  Array [
    "set fillStyle",
    "#0060df60",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#ff940060",
  ],
  Array [
    "set fillStyle",
    "#ff9400",
  ],
  Array [
    "set fillStyle",
    "#ff940060",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#45a1ff60",
  ],
  Array [
    "set fillStyle",
    "#45a1ff",
  ],
  Array [
    "set fillStyle",
    "#45a1ff60",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set globalCompositeOperation",
    "lighter",
  ],
  Array [
    "set fillStyle",
    "#b1b1b360",
  ],
  Array [
    "set fillStyle",
    "#b1b1b3",
  ],
  Array [
    "set fillStyle",
    "#b1b1b360",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#ffe90070",
  ],
  Array [
    "set fillStyle",
    "#ffe129",
  ],
  Array [
    "set fillStyle",
    "#ffe90070",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#6200a460",
  ],
  Array [
    "set fillStyle",
    "#6200a4",
  ],
  Array [
    "set fillStyle",
    "#6200a460",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#12bc0060",
  ],
  Array [
    "set fillStyle",
    "#12bc00",
  ],
  Array [
    "set fillStyle",
    "#12bc0060",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#0060df60",
  ],
  Array [
    "set fillStyle",
    "#0060df",
  ],
  Array [
    "set fillStyle",
    "#0060df60",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#ff940060",
  ],
  Array [
    "set fillStyle",
    "#ff9400",
  ],
  Array [
    "set fillStyle",
    "#ff940060",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "#45a1ff60",
  ],
  Array [
    "set fillStyle",
    "#45a1ff",
  ],
  Array [
    "set fillStyle",
    "#45a1ff60",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    "transparent",
  ],
  Array [
    "set fillStyle",
    Object {},
  ],
  Array [
    "clearRect",
    0,
    0,
    400,
    400,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "set fillStyle",
    "black",
  ],
  Array [
    "fillRect",
    1,
    0,
    54.33802816901409,
    1,
  ],
  Array [
    "fillRect",
    0,
    1,
    56.33802816901409,
    4,
  ],
  Array [
    "fillRect",
    1,
    5,
    54.33802816901409,
    1,
  ],
  Array [
    "set fillStyle",
    "black",
  ],
  Array [
    "fillRect",
    114,
    0,
    54.33802816901409,
    1,
  ],
  Array [
    "fillRect",
    113,
    1,
    56.33802816901409,
    4,
  ],
  Array [
    "fillRect",
    114,
    5,
    54.33802816901409,
    1,
  ],
  Array [
    "set fillStyle",
    "black",
  ],
  Array [
    "fillRect",
    226,
    0,
    54.33802816901409,
    1,
  ],
  Array [
    "fillRect",
    225,
    1,
    56.33802816901409,
    4,
  ],
  Array [
    "fillRect",
    226,
    5,
    54.33802816901409,
    1,
  ],
  Array [
    "set fillStyle",
    "black",
  ],
  Array [
    "fillRect",
    339,
    0,
    54.33802816901409,
    1,
  ],
  Array [
    "fillRect",
    338,
    1,
    56.33802816901409,
    4,
  ],
  Array [
    "fillRect",
    339,
    5,
    54.33802816901409,
    1,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "clearRect",
    0,
    0,
    400,
    400,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "scale",
    1,
    1,
  ],
]
`;
